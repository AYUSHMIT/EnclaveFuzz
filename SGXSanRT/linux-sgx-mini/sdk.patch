diff --git a/common/inc/sgx_random_buffers.h b/common/inc/sgx_random_buffers.h
index 721de3d7..783f2df9 100644
--- a/common/inc/sgx_random_buffers.h
+++ b/common/inc/sgx_random_buffers.h
@@ -281,7 +281,7 @@ private:
         }
     };
 
-    char __bigger_[size()];
+    char __bigger_[size(1)];
 };
 
 template <class T, unsigned M = 0x1000>
diff --git a/sdk/trts/linux/trts_pic.S b/sdk/trts/linux/trts_pic.S
index bb7395d2..42fb55f4 100644
--- a/sdk/trts/linux/trts_pic.S
+++ b/sdk/trts/linux/trts_pic.S
@@ -76,6 +76,7 @@ DECLARE_LOCAL_FUNC lock_enclave
  * ---------------------------------------------------------------------
  */
 DECLARE_LOCAL_FUNC get_thread_data
+    .weak get_thread_data
     READ_TD_DATA self_addr 
     ret
 
diff --git a/sdk/trts/trts.cpp b/sdk/trts/trts.cpp
index 2646a0e6..a9cbb4dd 100644
--- a/sdk/trts/trts.cpp
+++ b/sdk/trts/trts.cpp
@@ -67,6 +67,7 @@ extern uint64_t g_enclave_size;
 //      0 - the whole buffer or part of the buffer is not within the enclave,
 //          or the buffer is wrap around
 //
+__attribute__((weak))
 int sgx_is_within_enclave(const void *addr, size_t size)
 {
     size_t start = reinterpret_cast<size_t>(addr);
@@ -100,6 +101,7 @@ int sgx_is_within_enclave(const void *addr, size_t size)
 //      0 - the whole buffer or part of the buffer is not outside the enclave,
 //          or the buffer is wrap around
 //
+__attribute__((weak))
 int sgx_is_outside_enclave(const void *addr, size_t size)
 {
     size_t start = reinterpret_cast<size_t>(addr);
@@ -139,6 +141,7 @@ int sgx_is_outside_enclave(const void *addr, size_t size)
 // so the outside stack is automatically unwind.
 // In addition, sgx_ocalloc needs perform outside stack probe to make sure it is not allocating beyond the end of the stack.
 #define OC_ROUND 16
+__attribute__((weak))
 void * sgx_ocalloc(size_t size)
 {
     // read the outside stack address from current SSA
@@ -208,6 +211,7 @@ void * sgx_ocalloc(size_t size)
 //      N/A
 // sgx_ocfree restores the original outside stack pointer in the SSA.
 // Do not call this function if you still need the buffer allocated by sgx_ocalloc within the ECALL.
+__attribute__((weak))
 void sgx_ocfree()
 {
     // ECALL stack frame
